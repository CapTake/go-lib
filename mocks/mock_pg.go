// Code generated by MockGen. DO NOT EDIT.
// Source: pg.go

package mocks

import (
	context "context"
	reflect "reflect"

	pg "github.com/go-pg/pg/v10"
	gomock "github.com/golang/mock/gomock"
)


// MockPgDB is a mock of PgDB interface.
type MockPgDB struct {
	ctrl     *gomock.Controller
	recorder *MockPgDBMockRecorder
}

// MockPgDBMockRecorder is the mock recorder for MockPgDB.
type MockPgDBMockRecorder struct {
	mock *MockPgDB
}

// NewMockPgDB creates a new mock instance.
func NewMockPgDB(ctrl *gomock.Controller) *MockPgDB {
	mock := &MockPgDB{ctrl: ctrl}
	mock.recorder = &MockPgDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgDB) EXPECT() *MockPgDBMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockPgDB) ExecContext(c context.Context, query interface{}, params ...interface{}) (pg.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(pg.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockPgDBMockRecorder) ExecContext(c, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockPgDB)(nil).ExecContext), varargs...)
}